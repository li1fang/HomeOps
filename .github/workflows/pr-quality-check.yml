name: HomeOps Quality Gates (PEP668-safe)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  gate1-cloud:
    name: Gate1 (cloud) — lint & test with venv
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Bootstrap Python venv (PEP668-safe)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y python3 python3-venv python3-pip
          python3 -m venv .venv
          . .venv/bin/activate
          python -m pip install -U pip wheel
          python -m pip install "ansible-core>=2.16" "ansible-lint>=24.0" "yamllint>=1.32"
          echo "$PWD/.venv/bin" >> "$GITHUB_PATH"

      - name: Show tool versions
        shell: bash
        run: |
          . .venv/bin/activate
          ansible --version | head -n1 || true
          ansible-lint --version || true
          yamllint --version || true

      - name: Gate1.1 — make lint
        env:
          ANSIBLE_STDOUT_CALLBACK: ansible.builtin.yaml
        run: make lint

      - name: Gate1.2 — make test
        env:
          ANSIBLE_STDOUT_CALLBACK: ansible.builtin.yaml
        run: make test

  gate2-selfhosted:
    name: Gate2 (self-hosted) — itest + conditional deploy
    # Only run on push to main, not on PR (avoids fork approvals)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: gate1-cloud
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Ensure venv on self-hosted
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v python3 >/dev/null 2>&1; then
            echo "python3 missing on runner" >&2
            exit 2
          fi
          python3 -m venv .venv || true
          . .venv/bin/activate || true
          python -m pip install -U pip wheel || true
          python -m pip install "ansible-core>=2.16" "ansible-lint>=24.0" "yamllint>=1.32" || true
          echo "$PWD/.venv/bin" >> "$GITHUB_PATH"

      - name: Gate2 — make itest
        env:
          ANSIBLE_STDOUT_CALLBACK: ansible.builtin.yaml
        run: make itest

      - name: Upload itest artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: itest-artifacts
          path: artifacts/itest
          if-no-files-found: ignore

      - name: Deploy (only when explicitly enabled)
        if: ${{ success() && vars.AUTO_DEPLOY == 'true' }}
        env:
          ANSIBLE_STDOUT_CALLBACK: ansible.builtin.yaml
        run: make deploy
