---
- name: Prepare Gate 2 artifact directory
  hosts: localhost
  gather_facts: false
  vars:
    artifacts_dir: "{{ output_dir | default('artifacts/itest') }}"
  tasks:
    - name: Ensure artifacts directory exists
      ansible.builtin.file:
        path: "{{ artifacts_dir }}"
        state: directory
        mode: "0755"

- name: Verify controller observability stack
  hosts: controllers
  gather_facts: true
  vars:
    artifacts_dir: "{{ output_dir | default('artifacts/itest') }}"
    required_services:
      - unit: loki.service
        friendly: loki
      - unit: grafana-server.service
        friendly: grafana-server
      - unit: alloy.service
        friendly: alloy
    loki_ready_endpoint: "http://127.0.0.1:3100/ready"
    grafana_health_endpoint: "http://127.0.0.1:3000/api/health"
    loki_query_string: '{job="systemd-journal"}'
    freshness_limit_seconds: 600
    expected_loki_hosts: "{{ ((groups['controllers'] | default([])) + (groups['linux'] | default([]))) | unique }}"
  tasks:
    - name: Collect controller service facts
      ansible.builtin.service_facts:

    - name: Write controller service facts to artifacts
      ansible.builtin.copy:
        dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_service_facts.json"
        content: "{{ ansible_facts.services | to_nice_json }}"
        mode: "0644"
      delegate_to: localhost

    - name: Assert required services are running and enabled
      ansible.builtin.include_tasks: tasks/verify_required_service.yaml
      loop: "{{ required_services }}"
      loop_control:
        loop_var: required_service
        label: "{{ required_service.unit }}"

    - name: Probe Loki readiness endpoint
      block:
        - name: Request Loki readiness status
          ansible.builtin.uri:
            url: "{{ loki_ready_endpoint }}"
            method: GET
            return_content: true
            status_code: 200
            timeout: 10
          register: loki_ready
          until: loki_ready.status | default(0) == 200
          retries: 10
          delay: 5

        - name: Write Loki readiness response
          ansible.builtin.copy:
            dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_loki_ready_response.json"
            content: "{{ loki_ready | to_nice_json }}"
            mode: "0644"
          delegate_to: localhost
      rescue:
        - name: Persist Loki readiness failure details
          ansible.builtin.copy:
            dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_loki_ready_response.json"
            content: "{{ ansible_failed_result | to_nice_json }}"
            mode: "0644"
          delegate_to: localhost

        - name: Fail when Loki readiness probe fails
          ansible.builtin.fail:
            msg: "Loki readiness endpoint check failed; see artifacts/loki_ready_response.json for details."

    - name: Probe Grafana health endpoint
      block:
        - name: Request Grafana health status
          ansible.builtin.uri:
            url: "{{ grafana_health_endpoint }}"
            method: GET
            return_content: true
            status_code: [200, 401]
            timeout: 10
          register: grafana_health

        - name: Write Grafana health response
          ansible.builtin.copy:
            dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_grafana_health_response.json"
            content: "{{ grafana_health | to_nice_json }}"
            mode: "0644"
          delegate_to: localhost
      rescue:
        - name: Persist Grafana health failure details
          ansible.builtin.copy:
            dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_grafana_health_response.json"
            content: "{{ ansible_failed_result | to_nice_json }}"
            mode: "0644"
          delegate_to: localhost

        - name: Fail when Grafana health probe fails
          ansible.builtin.fail:
            msg: "Grafana health endpoint check failed; see artifacts/grafana_health_response.json for details."

    - name: Check Grafana Loki datasource file metadata
      ansible.builtin.stat:
        path: /etc/grafana/provisioning/datasources/loki.yml
      register: grafana_datasource_stat

    - name: Assert Grafana Loki datasource file exists
      ansible.builtin.assert:
        that:
          - grafana_datasource_stat.stat.exists
          - not grafana_datasource_stat.stat.isdir
        fail_msg: "Grafana Loki datasource definition missing at /etc/grafana/provisioning/datasources/loki.yml"

    - name: Confirm Grafana Loki datasource references Loki type
      ansible.builtin.command:
        cmd: >-
          grep -F 'type: loki' /etc/grafana/provisioning/datasources/loki.yml
      register: grafana_datasource_check
      changed_when: false

    - name: Record Grafana datasource verification snippet
      ansible.builtin.copy:
        dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_grafana_datasource_check.log"
        content: "{{ grafana_datasource_check.stdout | default('') }}\n"
        mode: "0644"
      delegate_to: localhost

    - name: Query Loki for systemd journal logs
      block:
        - name: Compute Loki query window bounds
          ansible.builtin.set_fact:
            loki_query_window_end_ns: "{{ (ansible_date_time.epoch | int) * 1000000000 }}"
            loki_query_window_start_ns: "{{ ((ansible_date_time.epoch | int) - (freshness_limit_seconds | int)) * 1000000000 }}"

        - name: Build Loki range query URL
          ansible.builtin.set_fact:
            loki_range_query_url: >-
              {{ 'http://127.0.0.1:3100/loki/api/v1/query_range?query=' ~ (loki_query_string | urlencode)
                 ~ '&direction=backward&limit=500&step=60&start=' ~ loki_query_window_start_ns
                 ~ '&end=' ~ loki_query_window_end_ns }}

        - name: Request Loki log query results
          ansible.builtin.uri:
            url: "{{ loki_range_query_url }}"
            method: GET
            return_content: true
            status_code: 200
            timeout: 15
          register: loki_query

        - name: Write Loki query response
          ansible.builtin.copy:
            dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_loki_query_response.json"
            content: "{{ loki_query | to_nice_json }}"
            mode: "0644"
          delegate_to: localhost
      rescue:
        - name: Persist Loki query failure details
          ansible.builtin.copy:
            dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_loki_query_response.json"
            content: "{{ ansible_failed_result | to_nice_json }}"
            mode: "0644"
          delegate_to: localhost

        - name: Fail when Loki query fails
          ansible.builtin.fail:
            msg: "Loki log query failed; see artifacts/loki_query_response.json for details."

    - name: Ensure Loki query returned results
      ansible.builtin.assert:
        that:
          - "loki_query.json is defined"
          - "loki_query.json.data is defined"
          - "loki_query.json.data.result is defined"
        fail_msg: "Loki query response missing expected data structure"

    - name: Assert Loki query returned at least one log stream
      ansible.builtin.assert:
        that:
          - "(loki_query.json.data.result | default([])) | length > 0"
        fail_msg: "Loki query returned no log streams; expected recent systemd journal entries"
        success_msg: "Loki query returned one or more log streams"

    - name: Ensure expected Loki hosts list is not empty
      ansible.builtin.assert:
        that:
          - expected_loki_hosts | length > 0
        fail_msg: "No expected Loki hosts resolved from inventory groups 'controllers' or 'linux'"

    - name: Initialize Loki host coverage tracking structures
      ansible.builtin.set_fact:
        loki_host_summary: {}
        loki_missing_host_streams: []

    - name: Track Loki streams missing host-identifying labels
      ansible.builtin.set_fact:
        loki_missing_host_streams: "{{ loki_missing_host_streams + [stream_labels] }}"
      loop: "{{ loki_query.json.data.result | default([]) }}"
      loop_control:
        label: "{{ stream_labels | to_json }}"
      vars:
        stream_labels: "{{ item.stream | default({}) }}"
        host_label: "{{ stream_labels.host | default(stream_labels.hostname | default(stream_labels.instance | default(stream_labels.node | default('')))) }}"
      when: host_label | length == 0

    - name: Capture latest Loki entry per host
      ansible.builtin.set_fact:
        loki_host_summary: >-
          {{
            loki_host_summary | combine({
              host_label: selected_summary
            }, recursive=True)
          }}
      loop: "{{ loki_query.json.data.result | default([]) }}"
      loop_control:
        label: "{{ host_label | default('missing-host-label') }}"
      vars:
        stream_labels: "{{ item.stream | default({}) }}"
        host_label: "{{ stream_labels.host | default(stream_labels.hostname | default(stream_labels.instance | default(stream_labels.node | default('')))) }}"
        raw_entry_timestamps: "{{ item.values | default([]) | map('first') | list }}"
        numeric_entry_timestamps: "{{ raw_entry_timestamps | map('int') | list }}"
        newest_entry_ns: "{{ (numeric_entry_timestamps | max) if numeric_entry_timestamps | length > 0 else 0 }}"
        newest_entry_epoch: "{{ ((newest_entry_ns | float) / 1000000000) | int }}"
        summary: >-
          {{
            {
              'labels': stream_labels,
              'latest_timestamp_ns': newest_entry_ns,
              'latest_timestamp_epoch': newest_entry_epoch,
              'age_seconds': (ansible_date_time.epoch | int) - newest_entry_epoch,
              'total_entries': item.values | length
            }
          }}
        existing_summary: "{{ loki_host_summary.get(host_label) }}"
        selected_summary: >-
          {{
            summary if not (
              existing_summary is mapping and
              (existing_summary['latest_timestamp_ns'] | default(0)) >= newest_entry_ns
            ) else existing_summary
          }}
      when:
        - host_label | length > 0
        - numeric_entry_timestamps | length > 0

    - name: Compute required hosts missing Loki logs
      ansible.builtin.set_fact:
        loki_hosts_missing_logs: "{{ expected_loki_hosts | difference(loki_host_summary.keys() | list) }}"

    - name: Persist Loki host summary artifact
      ansible.builtin.copy:
        dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_loki_host_summary.json"
        content: >-
          {{
            {
              'expected_hosts': expected_loki_hosts,
              'observed_hosts': loki_host_summary,
              'missing_required_hosts': loki_hosts_missing_logs,
              'missing_host_label_streams': loki_missing_host_streams,
              'freshness_limit_seconds': freshness_limit_seconds
            } | to_nice_json
          }}
        mode: "0644"
      delegate_to: localhost

    - name: Fail if any Loki streams lack host labels
      ansible.builtin.fail:
        msg: >-
          Loki query returned stream(s) without host-identifying labels; see
          {{ artifacts_dir }}/{{ inventory_hostname }}_loki_host_summary.json for details.
      when: loki_missing_host_streams | length > 0

    - name: Fail if Loki logs missing for required hosts
      ansible.builtin.fail:
        msg: >-
          Loki query did not return logs for required hosts: {{ loki_hosts_missing_logs }}.
          Expected hosts: {{ expected_loki_hosts }}
      when: loki_hosts_missing_logs | length > 0

    - name: Assert Loki log freshness for required hosts
      ansible.builtin.assert:
        that:
          - "(loki_host_summary[loki_required_host]['age_seconds'] | int) <= (freshness_limit_seconds | int)"
        fail_msg: >-
          Latest Loki entry for {{ loki_required_host }} is
          {{ loki_host_summary[loki_required_host]['age_seconds'] | int }}s old; freshness
          limit is {{ freshness_limit_seconds }}s.
        success_msg: >-
          Loki logs for {{ loki_required_host }} within freshness window — age
          {{ loki_host_summary[loki_required_host]['age_seconds'] | int }}s (limit {{ freshness_limit_seconds }}s).
      loop: "{{ expected_loki_hosts }}"
      loop_control:
        loop_var: loki_required_host
        label: "{{ loki_required_host }}"

- name: Verify Alloy service on Linux fleet
  hosts: linux
  gather_facts: true
  vars:
    artifacts_dir: "{{ output_dir | default('artifacts/itest') }}"
  tasks:
    - name: Collect Linux service facts
      ansible.builtin.service_facts:

    - name: Write Linux host service facts to artifacts
      ansible.builtin.copy:
        dest: "{{ artifacts_dir }}/{{ inventory_hostname }}_service_facts.json"
        content: "{{ ansible_facts.services | to_nice_json }}"
        mode: "0644"
      delegate_to: localhost

    - name: Assert Alloy service running and enabled on Linux host
      ansible.builtin.assert:
        that:
          - "'alloy.service' in ansible_facts.services"
          - "ansible_facts.services['alloy.service'].state == 'running'"
          - >-
            (ansible_facts.services['alloy.service'].status is defined
             and ansible_facts.services['alloy.service'].status == 'enabled')
            or (ansible_facts.services['alloy.service'].enabled is defined
                and ansible_facts.services['alloy.service'].enabled)
        fail_msg: "Alloy service must be running and enabled on {{ inventory_hostname }}"
        success_msg: "Alloy service running and enabled on {{ inventory_hostname }}"
