---
- name: Prepare deploy evidence directory
  hosts: localhost
  gather_facts: false
  vars:
    deploy_artifacts_dir: "{{ output_dir | default('artifacts/itest') }}"
  tasks:
    - name: Ensure deploy artifacts directory exists
      ansible.builtin.file:
        path: "{{ deploy_artifacts_dir }}"
        state: directory
        mode: "0755"

    - name: Share deploy artifacts directory with other plays
      ansible.builtin.set_fact:
        deploy_artifacts_dir: "{{ deploy_artifacts_dir }}"

- name: Deploy observability services on controller
  hosts: controllers
  become: true
  gather_facts: true
  vars:
    deploy_artifacts_dir: "{{ hostvars['localhost'].deploy_artifacts_dir | default('artifacts/itest') }}"
    templates_dir: "{{ playbook_dir }}/../templates"
    loki_config_path: /etc/loki/config.yaml
    loki_data_dir: /var/lib/loki
    loki_data_subdirs:
      - "{{ loki_data_dir }}"
      - "{{ loki_data_dir }}/wal"
      - "{{ loki_data_dir }}/index"
      - "{{ loki_data_dir }}/cache"
      - "{{ loki_data_dir }}/chunks"
      - "{{ loki_data_dir }}/compactor"
    loki_service_user: loki
    loki_service_group: loki
    loki_http_scheme: http
    loki_http_listen_address: "{{ loki_listen_address | default('0.0.0.0') }}"
    loki_http_port: "{{ (loki_port | default(3100)) | int }}"
    loki_grpc_port: 9096
    loki_advertise_host: >-
      {{ loki_advertise_address | default(
           ansible_host | default(
             ansible_default_ipv4.address | default(inventory_hostname))) }}
    apt_periodic_disable_conf: /etc/apt/apt.conf.d/99homeops-disable-periodic
    apt_lockdown_units:
      - name: unattended-upgrades.service
        state: stopped
        masked: true
      - name: apt-daily.service
        state: stopped
        masked: true
      - name: apt-daily.timer
        state: stopped
        masked: true
      - name: apt-daily-upgrade.service
        state: stopped
        masked: true
      - name: apt-daily-upgrade.timer
        state: stopped
        masked: true
    dpkg_recover_retries: 6
    dpkg_recover_delay: 10
    dpkg_lock_retry_rc: 2
    dpkg_lock_retry_pattern: '(lock|锁)'
    apt_lock_files:
      - /var/lib/dpkg/lock-frontend
      - /var/lib/dpkg/lock
      - /var/lib/apt/lists/lock
    apt_lock_wait_timeout: 300
    apt_lock_wait_interval: 5
    apt_environment:
      DEBIAN_FRONTEND: noninteractive
    apt_operation_retries: 5
    apt_operation_delay: 20
    apt_operation_timeout: 600
    apt_lock_timeout: 120
    apt_cache_valid_time: 3600
    download_retries: 5
    download_delay: 15
    download_timeout: 60
    apt_quiesce_units: "{{ (apt_lockdown_units | map(attribute='name') | list) | unique }}"
  pre_tasks:
    - name: Capture apt maintenance snapshot before window
      ansible.builtin.shell: |
        set -uo pipefail
        phase="pre-maintenance"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for unit in {{ apt_quiesce_units | join(' ') }}; do
            echo "--- systemctl status ${unit} ---"
            systemctl status "${unit}" --no-pager 2>&1 || true
          done
          echo "--- systemctl list-timers (filtered) ---"
          systemctl list-timers --all 2>&1 | grep -E 'apt|unattended' || true
        }
      args:
        executable: /bin/bash
      register: apt_quiesce_snapshot_pre
      changed_when: false

    - name: Capture dpkg lock snapshot before window
      ansible.builtin.shell: |
        set -uo pipefail
        phase="pre-maintenance"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for lock_path in {{ apt_lock_files | map('quote') | join(' ') }}; do
            if [ -e "${lock_path}" ]; then
              echo "lock ${lock_path}: PRESENT"
              ls -l "${lock_path}"
              if command -v fuser >/dev/null 2>&1; then
                echo "-- fuser holders --"
                fuser -v "${lock_path}" 2>&1 || true
              else
                echo "fuser command unavailable"
              fi
            else
              echo "lock ${lock_path}: absent"
            fi
          done
          echo "--- active apt/dpkg processes ---"
          ps -eo pid,ppid,stat,cmd | awk '/apt/ || /dpkg/' || true
        }
      args:
        executable: /bin/bash
      register: dpkg_lock_snapshot_pre
      changed_when: false

    - name: Disable unattended-upgrades service to release dpkg lock
      ansible.builtin.systemd:
        name: unattended-upgrades.service
        state: stopped
        enabled: false
        masked: true

    - name: Mask automatic apt units that hold dpkg locks
      ansible.builtin.systemd:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        enabled: false
        masked: "{{ item.masked | default(true) }}"
      loop: "{{ apt_lockdown_units | rejectattr('name', 'equalto', 'unattended-upgrades.service') | list }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Disable apt periodic jobs via apt.conf
      ansible.builtin.copy:
        dest: "{{ apt_periodic_disable_conf }}"
        content: |
          // HomeOps override: disable background apt timers to avoid dpkg locks
          APT::Periodic::Enable "0";
          APT::Periodic::Update-Package-Lists "0";
          APT::Periodic::Unattended-Upgrade "0";
        owner: root
        group: root
        mode: '0644'

    - name: Capture apt maintenance snapshot after window enforced
      ansible.builtin.shell: |
        set -uo pipefail
        phase="post-quiesce"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for unit in {{ apt_quiesce_units | join(' ') }}; do
            echo "--- systemctl status ${unit} ---"
            systemctl status "${unit}" --no-pager 2>&1 || true
          done
          echo "--- systemctl list-timers (filtered) ---"
          systemctl list-timers --all 2>&1 | grep -E 'apt|unattended' || true
        }
      args:
        executable: /bin/bash
      register: apt_quiesce_snapshot_post_quiesce
      changed_when: false

    - name: Capture dpkg lock snapshot after window enforced
      ansible.builtin.shell: |
        set -uo pipefail
        phase="post-quiesce"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for lock_path in {{ apt_lock_files | map('quote') | join(' ') }}; do
            if [ -e "${lock_path}" ]; then
              echo "lock ${lock_path}: PRESENT"
              ls -l "${lock_path}"
              if command -v fuser >/dev/null 2>&1; then
                echo "-- fuser holders --"
                fuser -v "${lock_path}" 2>&1 || true
              else
                echo "fuser command unavailable"
              fi
            else
              echo "lock ${lock_path}: absent"
            fi
          done
          echo "--- active apt/dpkg processes ---"
          ps -eo pid,ppid,stat,cmd | awk '/apt/ || /dpkg/' || true
        }
      args:
        executable: /bin/bash
      register: dpkg_lock_snapshot_post_quiesce
      changed_when: false

    - name: Recover from interrupted dpkg state
      ansible.builtin.command: dpkg --configure -a
      register: dpkg_recover
      changed_when: dpkg_recover.stdout != '' or dpkg_recover.stderr != ''
      failed_when:
        - dpkg_recover.rc not in [0, dpkg_lock_retry_rc]
        - dpkg_recover.rc == dpkg_lock_retry_rc and
          ((dpkg_recover.stderr | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none
      until: dpkg_recover.rc == 0
      retries: "{{ dpkg_recover_retries | int }}"
      delay: "{{ dpkg_recover_delay | int }}"
      environment: "{{ apt_environment }}"
  tasks:
    - name: Wait for dpkg locks before installing controller base packages
      ansible.builtin.wait_for:
        path: "{{ item }}"
        state: absent
        timeout: "{{ apt_lock_wait_timeout | int }}"
        sleep: "{{ apt_lock_wait_interval | int }}"
      loop: "{{ apt_lock_files }}"
      loop_control:
        label: "{{ item }}"

    - name: Refresh apt package index on controller
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: "{{ apt_cache_valid_time | int }}"
        lock_timeout: "{{ apt_lock_timeout | int }}"
      register: controller_cache_refresh
      retries: "{{ apt_operation_retries | int }}"
      delay: "{{ apt_operation_delay | int }}"
      until: controller_cache_refresh is succeeded
      environment: "{{ apt_environment }}"

    - name: Ensure required packages are installed
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - software-properties-common
          - wget
          - gpg
        state: present
        lock_timeout: "{{ apt_lock_timeout | int }}"
      register: controller_base_packages
      retries: "{{ apt_operation_retries | int }}"
      delay: "{{ apt_operation_delay | int }}"
      until: >-
        controller_base_packages is succeeded or (
          ((controller_base_packages.stderr | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none and
          ((controller_base_packages.stdout | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none and
          ((controller_base_packages.msg | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none
        )
      environment: "{{ apt_environment }}"

    - name: Report controller base package install attempts
      ansible.builtin.debug:
        msg: >-
          Controller package bootstrap succeeded after
          {{ controller_base_packages.attempts | default(1) }} attempt(s)

    - name: Create keyring directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Grafana GPG key
      ansible.builtin.get_url:
        url: https://apt.grafana.com/gpg.key
        dest: /etc/apt/keyrings/grafana.asc
        mode: '0644'
        timeout: "{{ download_timeout | int }}"
      register: grafana_key_download
      retries: "{{ download_retries | int }}"
      delay: "{{ download_delay | int }}"
      until: grafana_key_download is succeeded

    - name: Convert Grafana GPG key to keyring
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/grafana.gpg /etc/apt/keyrings/grafana.asc
        creates: /etc/apt/keyrings/grafana.gpg
      environment: "{{ apt_environment }}"

    - name: Add Grafana APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main"
        state: present
        filename: grafana

    - name: Wait for dpkg locks before installing controller observability packages
      ansible.builtin.wait_for:
        path: "{{ item }}"
        state: absent
        timeout: "{{ apt_lock_wait_timeout | int }}"
        sleep: "{{ apt_lock_wait_interval | int }}"
      loop: "{{ apt_lock_files }}"
      loop_control:
        label: "{{ item }}"

    - name: Install Loki and Grafana
      ansible.builtin.apt:
        name:
          - loki
          - grafana
        state: present
        lock_timeout: "{{ apt_lock_timeout | int }}"
      register: controller_observability_packages
      retries: "{{ apt_operation_retries | int }}"
      delay: "{{ apt_operation_delay | int }}"
      until: >-
        controller_observability_packages is succeeded or (
          ((controller_observability_packages.stderr | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none and
          ((controller_observability_packages.stdout | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none and
          ((controller_observability_packages.msg | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none
        )
      environment: "{{ apt_environment }}"

    - name: Report controller observability package install attempts
      ansible.builtin.debug:
        msg: >-
          Controller observability packages succeeded after
          {{ controller_observability_packages.attempts | default(1) }} attempt(s)

    - name: Capture apt maintenance snapshot after package stage
      ansible.builtin.shell: |
        set -uo pipefail
        phase="post-packages"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for unit in {{ apt_quiesce_units | join(' ') }}; do
            echo "--- systemctl status ${unit} ---"
            systemctl status "${unit}" --no-pager 2>&1 || true
          done
          echo "--- systemctl list-timers (filtered) ---"
          systemctl list-timers --all 2>&1 | grep -E 'apt|unattended' || true
        }
      args:
        executable: /bin/bash
      register: apt_quiesce_snapshot_post_packages
      changed_when: false

    - name: Capture dpkg lock snapshot after package stage
      ansible.builtin.shell: |
        set -uo pipefail
        phase="post-packages"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for lock_path in {{ apt_lock_files | map('quote') | join(' ') }}; do
            if [ -e "${lock_path}" ]; then
              echo "lock ${lock_path}: PRESENT"
              ls -l "${lock_path}"
              if command -v fuser >/dev/null 2>&1; then
                echo "-- fuser holders --"
                fuser -v "${lock_path}" 2>&1 || true
              else
                echo "fuser command unavailable"
              fi
            else
              echo "lock ${lock_path}: absent"
            fi
          done
          echo "--- active apt/dpkg processes ---"
          ps -eo pid,ppid,stat,cmd | awk '/apt/ || /dpkg/' || true
        }
      args:
        executable: /bin/bash
      register: dpkg_lock_snapshot_post_packages
      changed_when: false

    - name: Ensure Loki data directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ loki_service_user }}"
        group: "{{ loki_service_group }}"
        mode: "0750"
      loop: "{{ loki_data_subdirs }}"

    - name: Deploy Loki configuration
      ansible.builtin.template:
        src: "{{ templates_dir }}/loki-config.yaml.j2"
        dest: "{{ loki_config_path }}"
        owner: "{{ loki_service_user }}"
        group: "{{ loki_service_group }}"
        mode: "0640"
      notify: Restart Loki

    - name: Ensure Loki service is enabled and started
      ansible.builtin.systemd:
        name: loki
        state: started
        enabled: true

    - name: Record Loki connection facts for other hosts
      ansible.builtin.set_fact:
        loki_advertise_host: "{{ loki_advertise_host }}"
        loki_http_port: "{{ loki_http_port | int }}"
        loki_http_scheme: "{{ loki_http_scheme }}"

    - name: Create Grafana datasource directory
      ansible.builtin.file:
        path: /etc/grafana/provisioning/datasources
        state: directory
        mode: '0755'

    - name: Configure Grafana Loki datasource
      ansible.builtin.template:
        src: "{{ templates_dir }}/grafana-datasource-loki.yml.j2"
        dest: /etc/grafana/provisioning/datasources/loki.yml
        mode: '0644'
      notify: Restart Grafana

    - name: Ensure Grafana service is enabled and started
      ansible.builtin.systemd:
        name: grafana-server
        state: started
        enabled: true

  handlers:
    - name: Restart Loki
      ansible.builtin.systemd:
        name: loki
        state: restarted

    - name: Restart Grafana
      ansible.builtin.systemd:
        name: grafana-server
        state: restarted

- name: Deploy Grafana Alloy on Linux hosts
  hosts: linux,controllers
  become: true
  serial: 1
  vars:
    deploy_artifacts_dir: "{{ hostvars['localhost'].deploy_artifacts_dir | default('artifacts/itest') }}"
    controller_host: "{{ groups['controllers'][0] }}"
    controller_vars: "{{ hostvars[controller_host] }}"
    loki_push_scheme: "{{ controller_vars.loki_http_scheme | default('http') }}"
    loki_push_host: >-
      {{ 'localhost' if inventory_hostname == controller_host else
         controller_vars.loki_advertise_host | default(
           controller_vars.ansible_host | default(controller_host)) }}
    loki_push_port: "{{ controller_vars.loki_http_port | default(3100) | int }}"
    templates_dir: "{{ playbook_dir }}/../templates"
    dpkg_recover_retries: 6
    dpkg_recover_delay: 10
    dpkg_lock_retry_rc: 2
    dpkg_lock_retry_pattern: '(lock|锁)'
    apt_lock_files: "{{ controller_vars.apt_lock_files | default(['/var/lib/dpkg/lock-frontend', '/var/lib/dpkg/lock', '/var/lib/apt/lists/lock']) }}"
    apt_lock_wait_timeout: "{{ controller_vars.apt_lock_wait_timeout | default(300) | int }}"
    apt_lock_wait_interval: "{{ controller_vars.apt_lock_wait_interval | default(5) | int }}"
    apt_environment:
      DEBIAN_FRONTEND: noninteractive
    apt_periodic_disable_conf: /etc/apt/apt.conf.d/99homeops-disable-periodic
    apt_lockdown_units:
      - name: unattended-upgrades.service
        state: stopped
        masked: true
      - name: apt-daily.service
        state: stopped
        masked: true
      - name: apt-daily.timer
        state: stopped
        masked: true
      - name: apt-daily-upgrade.service
        state: stopped
        masked: true
      - name: apt-daily-upgrade.timer
        state: stopped
        masked: true
    apt_operation_retries: "{{ controller_vars.apt_operation_retries | default(5) | int }}"
    apt_operation_delay: "{{ controller_vars.apt_operation_delay | default(20) | int }}"
    apt_operation_timeout: "{{ controller_vars.apt_operation_timeout | default(600) | int }}"
    apt_lock_timeout: "{{ controller_vars.apt_lock_timeout | default(120) | int }}"
    apt_cache_valid_time: "{{ controller_vars.apt_cache_valid_time | default(3600) | int }}"
    download_retries: "{{ controller_vars.download_retries | default(5) | int }}"
    download_delay: "{{ controller_vars.download_delay | default(15) | int }}"
    download_timeout: "{{ controller_vars.download_timeout | default(60) | int }}"
    apt_quiesce_units: "{{ (apt_lockdown_units | map(attribute='name') | list) | unique }}"
  pre_tasks:
    - name: Capture apt maintenance snapshot before window
      ansible.builtin.shell: |
        set -uo pipefail
        phase="pre-maintenance"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for unit in {{ apt_quiesce_units | join(' ') }}; do
            echo "--- systemctl status ${unit} ---"
            systemctl status "${unit}" --no-pager 2>&1 || true
          done
          echo "--- systemctl list-timers (filtered) ---"
          systemctl list-timers --all 2>&1 | grep -E 'apt|unattended' || true
        }
      args:
        executable: /bin/bash
      register: apt_quiesce_snapshot_pre
      changed_when: false

    - name: Capture dpkg lock snapshot before window
      ansible.builtin.shell: |
        set -uo pipefail
        phase="pre-maintenance"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for lock_path in {{ apt_lock_files | map('quote') | join(' ') }}; do
            if [ -e "${lock_path}" ]; then
              echo "lock ${lock_path}: PRESENT"
              ls -l "${lock_path}"
              if command -v fuser >/dev/null 2>&1; then
                echo "-- fuser holders --"
                fuser -v "${lock_path}" 2>&1 || true
              else
                echo "fuser command unavailable"
              fi
            else
              echo "lock ${lock_path}: absent"
            fi
          done
          echo "--- active apt/dpkg processes ---"
          ps -eo pid,ppid,stat,cmd | awk '/apt/ || /dpkg/' || true
        }
      args:
        executable: /bin/bash
      register: dpkg_lock_snapshot_pre
      changed_when: false

    - name: Disable unattended-upgrades service to release dpkg lock
      ansible.builtin.systemd:
        name: unattended-upgrades.service
        state: stopped
        enabled: false
        masked: true

    - name: Mask automatic apt units that hold dpkg locks
      ansible.builtin.systemd:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        enabled: false
        masked: "{{ item.masked | default(true) }}"
      loop: "{{ apt_lockdown_units | rejectattr('name', 'equalto', 'unattended-upgrades.service') | list }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Disable apt periodic jobs via apt.conf
      ansible.builtin.copy:
        dest: "{{ apt_periodic_disable_conf }}"
        content: |
          // HomeOps override: disable background apt timers to avoid dpkg locks
          APT::Periodic::Enable "0";
          APT::Periodic::Update-Package-Lists "0";
          APT::Periodic::Unattended-Upgrade "0";
        owner: root
        group: root
        mode: '0644'

    - name: Capture apt maintenance snapshot after window enforced
      ansible.builtin.shell: |
        set -uo pipefail
        phase="post-quiesce"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for unit in {{ apt_quiesce_units | join(' ') }}; do
            echo "--- systemctl status ${unit} ---"
            systemctl status "${unit}" --no-pager 2>&1 || true
          done
          echo "--- systemctl list-timers (filtered) ---"
          systemctl list-timers --all 2>&1 | grep -E 'apt|unattended' || true
        }
      args:
        executable: /bin/bash
      register: apt_quiesce_snapshot_post_quiesce
      changed_when: false

    - name: Capture dpkg lock snapshot after window enforced
      ansible.builtin.shell: |
        set -uo pipefail
        phase="post-quiesce"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for lock_path in {{ apt_lock_files | map('quote') | join(' ') }}; do
            if [ -e "${lock_path}" ]; then
              echo "lock ${lock_path}: PRESENT"
              ls -l "${lock_path}"
              if command -v fuser >/dev/null 2>&1; then
                echo "-- fuser holders --"
                fuser -v "${lock_path}" 2>&1 || true
              else
                echo "fuser command unavailable"
              fi
            else
              echo "lock ${lock_path}: absent"
            fi
          done
          echo "--- active apt/dpkg processes ---"
          ps -eo pid,ppid,stat,cmd | awk '/apt/ || /dpkg/' || true
        }
      args:
        executable: /bin/bash
      register: dpkg_lock_snapshot_post_quiesce
      changed_when: false

    - name: Recover from interrupted dpkg state
      ansible.builtin.command: dpkg --configure -a
      register: dpkg_recover
      changed_when: dpkg_recover.stdout != '' or dpkg_recover.stderr != ''
      failed_when:
        - dpkg_recover.rc not in [0, dpkg_lock_retry_rc]
        - dpkg_recover.rc == dpkg_lock_retry_rc and
          ((dpkg_recover.stderr | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none
      until: dpkg_recover.rc == 0
      retries: "{{ dpkg_recover_retries | int }}"
      delay: "{{ dpkg_recover_delay | int }}"
      environment: "{{ apt_environment }}"
  tasks:
    - name: Wait for dpkg locks before installing Linux base packages
      ansible.builtin.wait_for:
        path: "{{ item }}"
        state: absent
        timeout: "{{ apt_lock_wait_timeout | int }}"
        sleep: "{{ apt_lock_wait_interval | int }}"
      loop: "{{ apt_lock_files }}"
      loop_control:
        label: "{{ item }}"

    - name: Refresh apt package index on Linux host
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: "{{ apt_cache_valid_time }}"
        lock_timeout: "{{ apt_lock_timeout }}"
      register: linux_cache_refresh
      retries: "{{ apt_operation_retries }}"
      delay: "{{ apt_operation_delay }}"
      until: linux_cache_refresh is succeeded
      environment: "{{ apt_environment }}"

    - name: Ensure required packages are installed
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - software-properties-common
          - wget
          - gpg
        state: present
        lock_timeout: "{{ apt_lock_timeout | int }}"
      register: linux_base_packages
      retries: "{{ apt_operation_retries | int }}"
      delay: "{{ apt_operation_delay | int }}"
      until: >-
        linux_base_packages is succeeded or (
          ((linux_base_packages.stderr | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none and
          ((linux_base_packages.stdout | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none and
          ((linux_base_packages.msg | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none
        )
      environment: "{{ apt_environment }}"

    - name: Report Linux base package install attempts
      ansible.builtin.debug:
        msg: >-
          Linux host package bootstrap succeeded after
          {{ linux_base_packages.attempts | default(1) }} attempt(s)

    - name: Create keyring directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Grafana GPG key
      ansible.builtin.get_url:
        url: https://apt.grafana.com/gpg.key
        dest: /etc/apt/keyrings/grafana.asc
        mode: '0644'
        timeout: "{{ download_timeout | int }}"
      register: grafana_key_download
      retries: "{{ download_retries | int }}"
      delay: "{{ download_delay | int }}"
      until: grafana_key_download is succeeded

    - name: Convert Grafana GPG key to keyring
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/grafana.gpg /etc/apt/keyrings/grafana.asc
        creates: /etc/apt/keyrings/grafana.gpg
      environment: "{{ apt_environment }}"

    - name: Add Grafana APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main"
        state: present
        filename: grafana

    - name: Wait for dpkg locks before installing Grafana Alloy
      ansible.builtin.wait_for:
        path: "{{ item }}"
        state: absent
        timeout: "{{ apt_lock_wait_timeout | int }}"
        sleep: "{{ apt_lock_wait_interval | int }}"
      loop: "{{ apt_lock_files }}"
      loop_control:
        label: "{{ item }}"

    - name: Install Grafana Alloy
      ansible.builtin.apt:
        name: alloy
        state: present
        lock_timeout: "{{ apt_lock_timeout | int }}"
      register: alloy_install
      retries: "{{ apt_operation_retries | int }}"
      delay: "{{ apt_operation_delay | int }}"
      until: >-
        alloy_install is succeeded or (
          ((alloy_install.stderr | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none and
          ((alloy_install.stdout | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none and
          ((alloy_install.msg | default('')) | regex_search(dpkg_lock_retry_pattern, ignorecase=True)) is none
        )
      environment: "{{ apt_environment }}"

    - name: Report Alloy package install attempts
      ansible.builtin.debug:
        msg: >-
          Alloy package install succeeded after
          {{ alloy_install.attempts | default(1) }} attempt(s)

    - name: Capture apt maintenance snapshot after package stage
      ansible.builtin.shell: |
        set -uo pipefail
        phase="post-packages"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for unit in {{ apt_quiesce_units | join(' ') }}; do
            echo "--- systemctl status ${unit} ---"
            systemctl status "${unit}" --no-pager 2>&1 || true
          done
          echo "--- systemctl list-timers (filtered) ---"
          systemctl list-timers --all 2>&1 | grep -E 'apt|unattended' || true
        }
      args:
        executable: /bin/bash
      register: apt_quiesce_snapshot_post_packages
      changed_when: false

    - name: Capture dpkg lock snapshot after package stage
      ansible.builtin.shell: |
        set -uo pipefail
        phase="post-packages"
        {
          echo "=== host: {{ inventory_hostname }} | phase: ${phase} ==="
          date --iso-8601=seconds
          for lock_path in {{ apt_lock_files | map('quote') | join(' ') }}; do
            if [ -e "${lock_path}" ]; then
              echo "lock ${lock_path}: PRESENT"
              ls -l "${lock_path}"
              if command -v fuser >/dev/null 2>&1; then
                echo "-- fuser holders --"
                fuser -v "${lock_path}" 2>&1 || true
              else
                echo "fuser command unavailable"
              fi
            else
              echo "lock ${lock_path}: absent"
            fi
          done
          echo "--- active apt/dpkg processes ---"
          ps -eo pid,ppid,stat,cmd | awk '/apt/ || /dpkg/' || true
        }
      args:
        executable: /bin/bash
      register: dpkg_lock_snapshot_post_packages
      changed_when: false

    - name: Create Alloy configuration directory
      ansible.builtin.file:
        path: /etc/alloy
        state: directory
        mode: '0755'

    - name: Deploy Alloy configuration
      ansible.builtin.template:
        src: "{{ templates_dir }}/config.alloy.j2"
        dest: /etc/alloy/config.alloy
        mode: '0644'
      notify: Restart Alloy

    - name: Ensure Alloy service is enabled and started
      ansible.builtin.systemd:
        name: alloy
        state: started
        enabled: true

  handlers:
    - name: Restart Alloy
      ansible.builtin.systemd:
        name: alloy
        state: restarted

- name: Aggregate deploy evidence snapshots
  hosts: localhost
  gather_facts: false
  vars:
    deploy_artifacts_dir: "{{ hostvars['localhost'].deploy_artifacts_dir | default('artifacts/itest') }}"
    templates_dir: "{{ playbook_dir }}/../templates"
    aggregate_hosts: "{{ (groups['controllers'] | default([])) | union(groups['linux'] | default([])) }}"
    apt_snapshot_sequence:
      - {label: 'pre-maintenance', var: 'apt_quiesce_snapshot_pre'}
      - {label: 'post-quiesce', var: 'apt_quiesce_snapshot_post_quiesce'}
      - {label: 'post-packages', var: 'apt_quiesce_snapshot_post_packages'}
    dpkg_snapshot_sequence:
      - {label: 'pre-maintenance', var: 'dpkg_lock_snapshot_pre'}
      - {label: 'post-quiesce', var: 'dpkg_lock_snapshot_post_quiesce'}
      - {label: 'post-packages', var: 'dpkg_lock_snapshot_post_packages'}
  tasks:
    - name: Write apt maintenance evidence artifact
      ansible.builtin.template:
        src: "{{ templates_dir }}/deploy_apt_quiesce_report.j2"
        dest: "{{ deploy_artifacts_dir }}/apt_quiesce_status.txt"
        mode: '0644'

    - name: Write dpkg lock evidence artifact
      ansible.builtin.template:
        src: "{{ templates_dir }}/deploy_dpkg_lock_report.j2"
        dest: "{{ deploy_artifacts_dir }}/dpkg_lock_report.txt"
        mode: '0644'
