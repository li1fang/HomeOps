- name: Linux -> Windows (one-time boot), orchestrated from control
  hosts: controllers
  gather_facts: false
  vars:
    win_host: ws-01-win
    linux_host: ws-01-linux

  tasks:
    - name: Trigger to-windows.sh on Linux
      ansible.builtin.command:
        cmd: "bash -lc /home/{{ hostvars[linux_host].ansible_user }}/ops/to-windows.sh"
      delegate_to: "{{ linux_host }}"
      async: 30
      poll: 0

    - name: Wait for Linux SSH to drop
      ansible.builtin.wait_for:
        host: "{{ hostvars[linux_host].ansible_host }}"
        port: 22
        state: drained
        timeout: 240
      delegate_to: localhost

    - name: Wait for Windows SSH to appear (with WoL fallback)
      ansible.builtin.import_tasks: ../tasks/wait_for_windows_with_wol.yml
      # The task logic for WoL is complex, so we can put it in a separate file.
      # For now, we will assume the playbook provided by the contractor has this logic correct.
      # The main fix is updating the host variables and ensuring the final check uses a native module.

    - name: Confirm Windows reachable
      ansible.windows.win_command: whoami
      delegate_to: "{{ win_host }}"
